// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/23/2024 01:27:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AES_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AES_top_vlg_sample_tst(
	CLK,
	in,
	key,
	reset,
	start,
	sampler_tx
);
input  CLK;
input [127:0] in;
input [127:0] key;
input  reset;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or in or key or reset or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AES_top_vlg_check_tst (
	ready,
	sb,
	sampler_rx
);
input  ready;
input [127:0] sb;
input sampler_rx;

reg  ready_expected;
reg [127:0] sb_expected;

reg  ready_prev;
reg [127:0] sb_prev;

reg  ready_expected_prev;
reg [127:0] sb_expected_prev;

reg  last_ready_exp;
reg [127:0] last_sb_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ready_prev = ready;
	sb_prev = sb;
end

// update expected /o prevs

always @(trigger)
begin
	ready_expected_prev = ready_expected;
	sb_expected_prev = sb_expected;
end



// expected ready
initial
begin
	ready_expected = 1'bX;
end 
// expected sb[ 127 ]
initial
begin
	sb_expected[127] = 1'bX;
end 
// expected sb[ 126 ]
initial
begin
	sb_expected[126] = 1'bX;
end 
// expected sb[ 125 ]
initial
begin
	sb_expected[125] = 1'bX;
end 
// expected sb[ 124 ]
initial
begin
	sb_expected[124] = 1'bX;
end 
// expected sb[ 123 ]
initial
begin
	sb_expected[123] = 1'bX;
end 
// expected sb[ 122 ]
initial
begin
	sb_expected[122] = 1'bX;
end 
// expected sb[ 121 ]
initial
begin
	sb_expected[121] = 1'bX;
end 
// expected sb[ 120 ]
initial
begin
	sb_expected[120] = 1'bX;
end 
// expected sb[ 119 ]
initial
begin
	sb_expected[119] = 1'bX;
end 
// expected sb[ 118 ]
initial
begin
	sb_expected[118] = 1'bX;
end 
// expected sb[ 117 ]
initial
begin
	sb_expected[117] = 1'bX;
end 
// expected sb[ 116 ]
initial
begin
	sb_expected[116] = 1'bX;
end 
// expected sb[ 115 ]
initial
begin
	sb_expected[115] = 1'bX;
end 
// expected sb[ 114 ]
initial
begin
	sb_expected[114] = 1'bX;
end 
// expected sb[ 113 ]
initial
begin
	sb_expected[113] = 1'bX;
end 
// expected sb[ 112 ]
initial
begin
	sb_expected[112] = 1'bX;
end 
// expected sb[ 111 ]
initial
begin
	sb_expected[111] = 1'bX;
end 
// expected sb[ 110 ]
initial
begin
	sb_expected[110] = 1'bX;
end 
// expected sb[ 109 ]
initial
begin
	sb_expected[109] = 1'bX;
end 
// expected sb[ 108 ]
initial
begin
	sb_expected[108] = 1'bX;
end 
// expected sb[ 107 ]
initial
begin
	sb_expected[107] = 1'bX;
end 
// expected sb[ 106 ]
initial
begin
	sb_expected[106] = 1'bX;
end 
// expected sb[ 105 ]
initial
begin
	sb_expected[105] = 1'bX;
end 
// expected sb[ 104 ]
initial
begin
	sb_expected[104] = 1'bX;
end 
// expected sb[ 103 ]
initial
begin
	sb_expected[103] = 1'bX;
end 
// expected sb[ 102 ]
initial
begin
	sb_expected[102] = 1'bX;
end 
// expected sb[ 101 ]
initial
begin
	sb_expected[101] = 1'bX;
end 
// expected sb[ 100 ]
initial
begin
	sb_expected[100] = 1'bX;
end 
// expected sb[ 99 ]
initial
begin
	sb_expected[99] = 1'bX;
end 
// expected sb[ 98 ]
initial
begin
	sb_expected[98] = 1'bX;
end 
// expected sb[ 97 ]
initial
begin
	sb_expected[97] = 1'bX;
end 
// expected sb[ 96 ]
initial
begin
	sb_expected[96] = 1'bX;
end 
// expected sb[ 95 ]
initial
begin
	sb_expected[95] = 1'bX;
end 
// expected sb[ 94 ]
initial
begin
	sb_expected[94] = 1'bX;
end 
// expected sb[ 93 ]
initial
begin
	sb_expected[93] = 1'bX;
end 
// expected sb[ 92 ]
initial
begin
	sb_expected[92] = 1'bX;
end 
// expected sb[ 91 ]
initial
begin
	sb_expected[91] = 1'bX;
end 
// expected sb[ 90 ]
initial
begin
	sb_expected[90] = 1'bX;
end 
// expected sb[ 89 ]
initial
begin
	sb_expected[89] = 1'bX;
end 
// expected sb[ 88 ]
initial
begin
	sb_expected[88] = 1'bX;
end 
// expected sb[ 87 ]
initial
begin
	sb_expected[87] = 1'bX;
end 
// expected sb[ 86 ]
initial
begin
	sb_expected[86] = 1'bX;
end 
// expected sb[ 85 ]
initial
begin
	sb_expected[85] = 1'bX;
end 
// expected sb[ 84 ]
initial
begin
	sb_expected[84] = 1'bX;
end 
// expected sb[ 83 ]
initial
begin
	sb_expected[83] = 1'bX;
end 
// expected sb[ 82 ]
initial
begin
	sb_expected[82] = 1'bX;
end 
// expected sb[ 81 ]
initial
begin
	sb_expected[81] = 1'bX;
end 
// expected sb[ 80 ]
initial
begin
	sb_expected[80] = 1'bX;
end 
// expected sb[ 79 ]
initial
begin
	sb_expected[79] = 1'bX;
end 
// expected sb[ 78 ]
initial
begin
	sb_expected[78] = 1'bX;
end 
// expected sb[ 77 ]
initial
begin
	sb_expected[77] = 1'bX;
end 
// expected sb[ 76 ]
initial
begin
	sb_expected[76] = 1'bX;
end 
// expected sb[ 75 ]
initial
begin
	sb_expected[75] = 1'bX;
end 
// expected sb[ 74 ]
initial
begin
	sb_expected[74] = 1'bX;
end 
// expected sb[ 73 ]
initial
begin
	sb_expected[73] = 1'bX;
end 
// expected sb[ 72 ]
initial
begin
	sb_expected[72] = 1'bX;
end 
// expected sb[ 71 ]
initial
begin
	sb_expected[71] = 1'bX;
end 
// expected sb[ 70 ]
initial
begin
	sb_expected[70] = 1'bX;
end 
// expected sb[ 69 ]
initial
begin
	sb_expected[69] = 1'bX;
end 
// expected sb[ 68 ]
initial
begin
	sb_expected[68] = 1'bX;
end 
// expected sb[ 67 ]
initial
begin
	sb_expected[67] = 1'bX;
end 
// expected sb[ 66 ]
initial
begin
	sb_expected[66] = 1'bX;
end 
// expected sb[ 65 ]
initial
begin
	sb_expected[65] = 1'bX;
end 
// expected sb[ 64 ]
initial
begin
	sb_expected[64] = 1'bX;
end 
// expected sb[ 63 ]
initial
begin
	sb_expected[63] = 1'bX;
end 
// expected sb[ 62 ]
initial
begin
	sb_expected[62] = 1'bX;
end 
// expected sb[ 61 ]
initial
begin
	sb_expected[61] = 1'bX;
end 
// expected sb[ 60 ]
initial
begin
	sb_expected[60] = 1'bX;
end 
// expected sb[ 59 ]
initial
begin
	sb_expected[59] = 1'bX;
end 
// expected sb[ 58 ]
initial
begin
	sb_expected[58] = 1'bX;
end 
// expected sb[ 57 ]
initial
begin
	sb_expected[57] = 1'bX;
end 
// expected sb[ 56 ]
initial
begin
	sb_expected[56] = 1'bX;
end 
// expected sb[ 55 ]
initial
begin
	sb_expected[55] = 1'bX;
end 
// expected sb[ 54 ]
initial
begin
	sb_expected[54] = 1'bX;
end 
// expected sb[ 53 ]
initial
begin
	sb_expected[53] = 1'bX;
end 
// expected sb[ 52 ]
initial
begin
	sb_expected[52] = 1'bX;
end 
// expected sb[ 51 ]
initial
begin
	sb_expected[51] = 1'bX;
end 
// expected sb[ 50 ]
initial
begin
	sb_expected[50] = 1'bX;
end 
// expected sb[ 49 ]
initial
begin
	sb_expected[49] = 1'bX;
end 
// expected sb[ 48 ]
initial
begin
	sb_expected[48] = 1'bX;
end 
// expected sb[ 47 ]
initial
begin
	sb_expected[47] = 1'bX;
end 
// expected sb[ 46 ]
initial
begin
	sb_expected[46] = 1'bX;
end 
// expected sb[ 45 ]
initial
begin
	sb_expected[45] = 1'bX;
end 
// expected sb[ 44 ]
initial
begin
	sb_expected[44] = 1'bX;
end 
// expected sb[ 43 ]
initial
begin
	sb_expected[43] = 1'bX;
end 
// expected sb[ 42 ]
initial
begin
	sb_expected[42] = 1'bX;
end 
// expected sb[ 41 ]
initial
begin
	sb_expected[41] = 1'bX;
end 
// expected sb[ 40 ]
initial
begin
	sb_expected[40] = 1'bX;
end 
// expected sb[ 39 ]
initial
begin
	sb_expected[39] = 1'bX;
end 
// expected sb[ 38 ]
initial
begin
	sb_expected[38] = 1'bX;
end 
// expected sb[ 37 ]
initial
begin
	sb_expected[37] = 1'bX;
end 
// expected sb[ 36 ]
initial
begin
	sb_expected[36] = 1'bX;
end 
// expected sb[ 35 ]
initial
begin
	sb_expected[35] = 1'bX;
end 
// expected sb[ 34 ]
initial
begin
	sb_expected[34] = 1'bX;
end 
// expected sb[ 33 ]
initial
begin
	sb_expected[33] = 1'bX;
end 
// expected sb[ 32 ]
initial
begin
	sb_expected[32] = 1'bX;
end 
// expected sb[ 31 ]
initial
begin
	sb_expected[31] = 1'bX;
end 
// expected sb[ 30 ]
initial
begin
	sb_expected[30] = 1'bX;
end 
// expected sb[ 29 ]
initial
begin
	sb_expected[29] = 1'bX;
end 
// expected sb[ 28 ]
initial
begin
	sb_expected[28] = 1'bX;
end 
// expected sb[ 27 ]
initial
begin
	sb_expected[27] = 1'bX;
end 
// expected sb[ 26 ]
initial
begin
	sb_expected[26] = 1'bX;
end 
// expected sb[ 25 ]
initial
begin
	sb_expected[25] = 1'bX;
end 
// expected sb[ 24 ]
initial
begin
	sb_expected[24] = 1'bX;
end 
// expected sb[ 23 ]
initial
begin
	sb_expected[23] = 1'bX;
end 
// expected sb[ 22 ]
initial
begin
	sb_expected[22] = 1'bX;
end 
// expected sb[ 21 ]
initial
begin
	sb_expected[21] = 1'bX;
end 
// expected sb[ 20 ]
initial
begin
	sb_expected[20] = 1'bX;
end 
// expected sb[ 19 ]
initial
begin
	sb_expected[19] = 1'bX;
end 
// expected sb[ 18 ]
initial
begin
	sb_expected[18] = 1'bX;
end 
// expected sb[ 17 ]
initial
begin
	sb_expected[17] = 1'bX;
end 
// expected sb[ 16 ]
initial
begin
	sb_expected[16] = 1'bX;
end 
// expected sb[ 15 ]
initial
begin
	sb_expected[15] = 1'bX;
end 
// expected sb[ 14 ]
initial
begin
	sb_expected[14] = 1'bX;
end 
// expected sb[ 13 ]
initial
begin
	sb_expected[13] = 1'bX;
end 
// expected sb[ 12 ]
initial
begin
	sb_expected[12] = 1'bX;
end 
// expected sb[ 11 ]
initial
begin
	sb_expected[11] = 1'bX;
end 
// expected sb[ 10 ]
initial
begin
	sb_expected[10] = 1'bX;
end 
// expected sb[ 9 ]
initial
begin
	sb_expected[9] = 1'bX;
end 
// expected sb[ 8 ]
initial
begin
	sb_expected[8] = 1'bX;
end 
// expected sb[ 7 ]
initial
begin
	sb_expected[7] = 1'bX;
end 
// expected sb[ 6 ]
initial
begin
	sb_expected[6] = 1'bX;
end 
// expected sb[ 5 ]
initial
begin
	sb_expected[5] = 1'bX;
end 
// expected sb[ 4 ]
initial
begin
	sb_expected[4] = 1'bX;
end 
// expected sb[ 3 ]
initial
begin
	sb_expected[3] = 1'bX;
end 
// expected sb[ 2 ]
initial
begin
	sb_expected[2] = 1'bX;
end 
// expected sb[ 1 ]
initial
begin
	sb_expected[1] = 1'bX;
end 
// expected sb[ 0 ]
initial
begin
	sb_expected[0] = 1'bX;
end 
// generate trigger
always @(ready_expected or ready or sb_expected or sb)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ready = %b | expected sb = %b | ",ready_expected_prev,sb_expected_prev);
	$display("| real ready = %b | real sb = %b | ",ready_prev,sb_prev);
`endif
	if (
		( ready_expected_prev !== 1'bx ) && ( ready_prev !== ready_expected_prev )
		&& ((ready_expected_prev !== last_ready_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ready_expected_prev);
		$display ("     Real value = %b", ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ready_exp = ready_expected_prev;
	end
	if (
		( sb_expected_prev[0] !== 1'bx ) && ( sb_prev[0] !== sb_expected_prev[0] )
		&& ((sb_expected_prev[0] !== last_sb_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[0] = sb_expected_prev[0];
	end
	if (
		( sb_expected_prev[1] !== 1'bx ) && ( sb_prev[1] !== sb_expected_prev[1] )
		&& ((sb_expected_prev[1] !== last_sb_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[1] = sb_expected_prev[1];
	end
	if (
		( sb_expected_prev[2] !== 1'bx ) && ( sb_prev[2] !== sb_expected_prev[2] )
		&& ((sb_expected_prev[2] !== last_sb_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[2] = sb_expected_prev[2];
	end
	if (
		( sb_expected_prev[3] !== 1'bx ) && ( sb_prev[3] !== sb_expected_prev[3] )
		&& ((sb_expected_prev[3] !== last_sb_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[3] = sb_expected_prev[3];
	end
	if (
		( sb_expected_prev[4] !== 1'bx ) && ( sb_prev[4] !== sb_expected_prev[4] )
		&& ((sb_expected_prev[4] !== last_sb_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[4] = sb_expected_prev[4];
	end
	if (
		( sb_expected_prev[5] !== 1'bx ) && ( sb_prev[5] !== sb_expected_prev[5] )
		&& ((sb_expected_prev[5] !== last_sb_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[5] = sb_expected_prev[5];
	end
	if (
		( sb_expected_prev[6] !== 1'bx ) && ( sb_prev[6] !== sb_expected_prev[6] )
		&& ((sb_expected_prev[6] !== last_sb_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[6] = sb_expected_prev[6];
	end
	if (
		( sb_expected_prev[7] !== 1'bx ) && ( sb_prev[7] !== sb_expected_prev[7] )
		&& ((sb_expected_prev[7] !== last_sb_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[7] = sb_expected_prev[7];
	end
	if (
		( sb_expected_prev[8] !== 1'bx ) && ( sb_prev[8] !== sb_expected_prev[8] )
		&& ((sb_expected_prev[8] !== last_sb_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[8] = sb_expected_prev[8];
	end
	if (
		( sb_expected_prev[9] !== 1'bx ) && ( sb_prev[9] !== sb_expected_prev[9] )
		&& ((sb_expected_prev[9] !== last_sb_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[9] = sb_expected_prev[9];
	end
	if (
		( sb_expected_prev[10] !== 1'bx ) && ( sb_prev[10] !== sb_expected_prev[10] )
		&& ((sb_expected_prev[10] !== last_sb_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[10] = sb_expected_prev[10];
	end
	if (
		( sb_expected_prev[11] !== 1'bx ) && ( sb_prev[11] !== sb_expected_prev[11] )
		&& ((sb_expected_prev[11] !== last_sb_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[11] = sb_expected_prev[11];
	end
	if (
		( sb_expected_prev[12] !== 1'bx ) && ( sb_prev[12] !== sb_expected_prev[12] )
		&& ((sb_expected_prev[12] !== last_sb_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[12] = sb_expected_prev[12];
	end
	if (
		( sb_expected_prev[13] !== 1'bx ) && ( sb_prev[13] !== sb_expected_prev[13] )
		&& ((sb_expected_prev[13] !== last_sb_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[13] = sb_expected_prev[13];
	end
	if (
		( sb_expected_prev[14] !== 1'bx ) && ( sb_prev[14] !== sb_expected_prev[14] )
		&& ((sb_expected_prev[14] !== last_sb_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[14] = sb_expected_prev[14];
	end
	if (
		( sb_expected_prev[15] !== 1'bx ) && ( sb_prev[15] !== sb_expected_prev[15] )
		&& ((sb_expected_prev[15] !== last_sb_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[15] = sb_expected_prev[15];
	end
	if (
		( sb_expected_prev[16] !== 1'bx ) && ( sb_prev[16] !== sb_expected_prev[16] )
		&& ((sb_expected_prev[16] !== last_sb_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[16] = sb_expected_prev[16];
	end
	if (
		( sb_expected_prev[17] !== 1'bx ) && ( sb_prev[17] !== sb_expected_prev[17] )
		&& ((sb_expected_prev[17] !== last_sb_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[17] = sb_expected_prev[17];
	end
	if (
		( sb_expected_prev[18] !== 1'bx ) && ( sb_prev[18] !== sb_expected_prev[18] )
		&& ((sb_expected_prev[18] !== last_sb_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[18] = sb_expected_prev[18];
	end
	if (
		( sb_expected_prev[19] !== 1'bx ) && ( sb_prev[19] !== sb_expected_prev[19] )
		&& ((sb_expected_prev[19] !== last_sb_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[19] = sb_expected_prev[19];
	end
	if (
		( sb_expected_prev[20] !== 1'bx ) && ( sb_prev[20] !== sb_expected_prev[20] )
		&& ((sb_expected_prev[20] !== last_sb_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[20] = sb_expected_prev[20];
	end
	if (
		( sb_expected_prev[21] !== 1'bx ) && ( sb_prev[21] !== sb_expected_prev[21] )
		&& ((sb_expected_prev[21] !== last_sb_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[21] = sb_expected_prev[21];
	end
	if (
		( sb_expected_prev[22] !== 1'bx ) && ( sb_prev[22] !== sb_expected_prev[22] )
		&& ((sb_expected_prev[22] !== last_sb_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[22] = sb_expected_prev[22];
	end
	if (
		( sb_expected_prev[23] !== 1'bx ) && ( sb_prev[23] !== sb_expected_prev[23] )
		&& ((sb_expected_prev[23] !== last_sb_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[23] = sb_expected_prev[23];
	end
	if (
		( sb_expected_prev[24] !== 1'bx ) && ( sb_prev[24] !== sb_expected_prev[24] )
		&& ((sb_expected_prev[24] !== last_sb_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[24] = sb_expected_prev[24];
	end
	if (
		( sb_expected_prev[25] !== 1'bx ) && ( sb_prev[25] !== sb_expected_prev[25] )
		&& ((sb_expected_prev[25] !== last_sb_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[25] = sb_expected_prev[25];
	end
	if (
		( sb_expected_prev[26] !== 1'bx ) && ( sb_prev[26] !== sb_expected_prev[26] )
		&& ((sb_expected_prev[26] !== last_sb_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[26] = sb_expected_prev[26];
	end
	if (
		( sb_expected_prev[27] !== 1'bx ) && ( sb_prev[27] !== sb_expected_prev[27] )
		&& ((sb_expected_prev[27] !== last_sb_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[27] = sb_expected_prev[27];
	end
	if (
		( sb_expected_prev[28] !== 1'bx ) && ( sb_prev[28] !== sb_expected_prev[28] )
		&& ((sb_expected_prev[28] !== last_sb_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[28] = sb_expected_prev[28];
	end
	if (
		( sb_expected_prev[29] !== 1'bx ) && ( sb_prev[29] !== sb_expected_prev[29] )
		&& ((sb_expected_prev[29] !== last_sb_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[29] = sb_expected_prev[29];
	end
	if (
		( sb_expected_prev[30] !== 1'bx ) && ( sb_prev[30] !== sb_expected_prev[30] )
		&& ((sb_expected_prev[30] !== last_sb_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[30] = sb_expected_prev[30];
	end
	if (
		( sb_expected_prev[31] !== 1'bx ) && ( sb_prev[31] !== sb_expected_prev[31] )
		&& ((sb_expected_prev[31] !== last_sb_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[31] = sb_expected_prev[31];
	end
	if (
		( sb_expected_prev[32] !== 1'bx ) && ( sb_prev[32] !== sb_expected_prev[32] )
		&& ((sb_expected_prev[32] !== last_sb_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[32] = sb_expected_prev[32];
	end
	if (
		( sb_expected_prev[33] !== 1'bx ) && ( sb_prev[33] !== sb_expected_prev[33] )
		&& ((sb_expected_prev[33] !== last_sb_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[33] = sb_expected_prev[33];
	end
	if (
		( sb_expected_prev[34] !== 1'bx ) && ( sb_prev[34] !== sb_expected_prev[34] )
		&& ((sb_expected_prev[34] !== last_sb_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[34] = sb_expected_prev[34];
	end
	if (
		( sb_expected_prev[35] !== 1'bx ) && ( sb_prev[35] !== sb_expected_prev[35] )
		&& ((sb_expected_prev[35] !== last_sb_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[35] = sb_expected_prev[35];
	end
	if (
		( sb_expected_prev[36] !== 1'bx ) && ( sb_prev[36] !== sb_expected_prev[36] )
		&& ((sb_expected_prev[36] !== last_sb_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[36] = sb_expected_prev[36];
	end
	if (
		( sb_expected_prev[37] !== 1'bx ) && ( sb_prev[37] !== sb_expected_prev[37] )
		&& ((sb_expected_prev[37] !== last_sb_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[37] = sb_expected_prev[37];
	end
	if (
		( sb_expected_prev[38] !== 1'bx ) && ( sb_prev[38] !== sb_expected_prev[38] )
		&& ((sb_expected_prev[38] !== last_sb_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[38] = sb_expected_prev[38];
	end
	if (
		( sb_expected_prev[39] !== 1'bx ) && ( sb_prev[39] !== sb_expected_prev[39] )
		&& ((sb_expected_prev[39] !== last_sb_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[39] = sb_expected_prev[39];
	end
	if (
		( sb_expected_prev[40] !== 1'bx ) && ( sb_prev[40] !== sb_expected_prev[40] )
		&& ((sb_expected_prev[40] !== last_sb_exp[40]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[40] = sb_expected_prev[40];
	end
	if (
		( sb_expected_prev[41] !== 1'bx ) && ( sb_prev[41] !== sb_expected_prev[41] )
		&& ((sb_expected_prev[41] !== last_sb_exp[41]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[41] = sb_expected_prev[41];
	end
	if (
		( sb_expected_prev[42] !== 1'bx ) && ( sb_prev[42] !== sb_expected_prev[42] )
		&& ((sb_expected_prev[42] !== last_sb_exp[42]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[42] = sb_expected_prev[42];
	end
	if (
		( sb_expected_prev[43] !== 1'bx ) && ( sb_prev[43] !== sb_expected_prev[43] )
		&& ((sb_expected_prev[43] !== last_sb_exp[43]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[43] = sb_expected_prev[43];
	end
	if (
		( sb_expected_prev[44] !== 1'bx ) && ( sb_prev[44] !== sb_expected_prev[44] )
		&& ((sb_expected_prev[44] !== last_sb_exp[44]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[44] = sb_expected_prev[44];
	end
	if (
		( sb_expected_prev[45] !== 1'bx ) && ( sb_prev[45] !== sb_expected_prev[45] )
		&& ((sb_expected_prev[45] !== last_sb_exp[45]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[45] = sb_expected_prev[45];
	end
	if (
		( sb_expected_prev[46] !== 1'bx ) && ( sb_prev[46] !== sb_expected_prev[46] )
		&& ((sb_expected_prev[46] !== last_sb_exp[46]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[46] = sb_expected_prev[46];
	end
	if (
		( sb_expected_prev[47] !== 1'bx ) && ( sb_prev[47] !== sb_expected_prev[47] )
		&& ((sb_expected_prev[47] !== last_sb_exp[47]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[47] = sb_expected_prev[47];
	end
	if (
		( sb_expected_prev[48] !== 1'bx ) && ( sb_prev[48] !== sb_expected_prev[48] )
		&& ((sb_expected_prev[48] !== last_sb_exp[48]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[48] = sb_expected_prev[48];
	end
	if (
		( sb_expected_prev[49] !== 1'bx ) && ( sb_prev[49] !== sb_expected_prev[49] )
		&& ((sb_expected_prev[49] !== last_sb_exp[49]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[49] = sb_expected_prev[49];
	end
	if (
		( sb_expected_prev[50] !== 1'bx ) && ( sb_prev[50] !== sb_expected_prev[50] )
		&& ((sb_expected_prev[50] !== last_sb_exp[50]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[50] = sb_expected_prev[50];
	end
	if (
		( sb_expected_prev[51] !== 1'bx ) && ( sb_prev[51] !== sb_expected_prev[51] )
		&& ((sb_expected_prev[51] !== last_sb_exp[51]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[51] = sb_expected_prev[51];
	end
	if (
		( sb_expected_prev[52] !== 1'bx ) && ( sb_prev[52] !== sb_expected_prev[52] )
		&& ((sb_expected_prev[52] !== last_sb_exp[52]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[52] = sb_expected_prev[52];
	end
	if (
		( sb_expected_prev[53] !== 1'bx ) && ( sb_prev[53] !== sb_expected_prev[53] )
		&& ((sb_expected_prev[53] !== last_sb_exp[53]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[53] = sb_expected_prev[53];
	end
	if (
		( sb_expected_prev[54] !== 1'bx ) && ( sb_prev[54] !== sb_expected_prev[54] )
		&& ((sb_expected_prev[54] !== last_sb_exp[54]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[54] = sb_expected_prev[54];
	end
	if (
		( sb_expected_prev[55] !== 1'bx ) && ( sb_prev[55] !== sb_expected_prev[55] )
		&& ((sb_expected_prev[55] !== last_sb_exp[55]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[55] = sb_expected_prev[55];
	end
	if (
		( sb_expected_prev[56] !== 1'bx ) && ( sb_prev[56] !== sb_expected_prev[56] )
		&& ((sb_expected_prev[56] !== last_sb_exp[56]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[56] = sb_expected_prev[56];
	end
	if (
		( sb_expected_prev[57] !== 1'bx ) && ( sb_prev[57] !== sb_expected_prev[57] )
		&& ((sb_expected_prev[57] !== last_sb_exp[57]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[57] = sb_expected_prev[57];
	end
	if (
		( sb_expected_prev[58] !== 1'bx ) && ( sb_prev[58] !== sb_expected_prev[58] )
		&& ((sb_expected_prev[58] !== last_sb_exp[58]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[58] = sb_expected_prev[58];
	end
	if (
		( sb_expected_prev[59] !== 1'bx ) && ( sb_prev[59] !== sb_expected_prev[59] )
		&& ((sb_expected_prev[59] !== last_sb_exp[59]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[59] = sb_expected_prev[59];
	end
	if (
		( sb_expected_prev[60] !== 1'bx ) && ( sb_prev[60] !== sb_expected_prev[60] )
		&& ((sb_expected_prev[60] !== last_sb_exp[60]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[60] = sb_expected_prev[60];
	end
	if (
		( sb_expected_prev[61] !== 1'bx ) && ( sb_prev[61] !== sb_expected_prev[61] )
		&& ((sb_expected_prev[61] !== last_sb_exp[61]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[61] = sb_expected_prev[61];
	end
	if (
		( sb_expected_prev[62] !== 1'bx ) && ( sb_prev[62] !== sb_expected_prev[62] )
		&& ((sb_expected_prev[62] !== last_sb_exp[62]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[62] = sb_expected_prev[62];
	end
	if (
		( sb_expected_prev[63] !== 1'bx ) && ( sb_prev[63] !== sb_expected_prev[63] )
		&& ((sb_expected_prev[63] !== last_sb_exp[63]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[63] = sb_expected_prev[63];
	end
	if (
		( sb_expected_prev[64] !== 1'bx ) && ( sb_prev[64] !== sb_expected_prev[64] )
		&& ((sb_expected_prev[64] !== last_sb_exp[64]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[64] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[64] = sb_expected_prev[64];
	end
	if (
		( sb_expected_prev[65] !== 1'bx ) && ( sb_prev[65] !== sb_expected_prev[65] )
		&& ((sb_expected_prev[65] !== last_sb_exp[65]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[65] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[65] = sb_expected_prev[65];
	end
	if (
		( sb_expected_prev[66] !== 1'bx ) && ( sb_prev[66] !== sb_expected_prev[66] )
		&& ((sb_expected_prev[66] !== last_sb_exp[66]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[66] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[66] = sb_expected_prev[66];
	end
	if (
		( sb_expected_prev[67] !== 1'bx ) && ( sb_prev[67] !== sb_expected_prev[67] )
		&& ((sb_expected_prev[67] !== last_sb_exp[67]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[67] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[67] = sb_expected_prev[67];
	end
	if (
		( sb_expected_prev[68] !== 1'bx ) && ( sb_prev[68] !== sb_expected_prev[68] )
		&& ((sb_expected_prev[68] !== last_sb_exp[68]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[68] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[68] = sb_expected_prev[68];
	end
	if (
		( sb_expected_prev[69] !== 1'bx ) && ( sb_prev[69] !== sb_expected_prev[69] )
		&& ((sb_expected_prev[69] !== last_sb_exp[69]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[69] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[69] = sb_expected_prev[69];
	end
	if (
		( sb_expected_prev[70] !== 1'bx ) && ( sb_prev[70] !== sb_expected_prev[70] )
		&& ((sb_expected_prev[70] !== last_sb_exp[70]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[70] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[70] = sb_expected_prev[70];
	end
	if (
		( sb_expected_prev[71] !== 1'bx ) && ( sb_prev[71] !== sb_expected_prev[71] )
		&& ((sb_expected_prev[71] !== last_sb_exp[71]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[71] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[71] = sb_expected_prev[71];
	end
	if (
		( sb_expected_prev[72] !== 1'bx ) && ( sb_prev[72] !== sb_expected_prev[72] )
		&& ((sb_expected_prev[72] !== last_sb_exp[72]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[72] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[72] = sb_expected_prev[72];
	end
	if (
		( sb_expected_prev[73] !== 1'bx ) && ( sb_prev[73] !== sb_expected_prev[73] )
		&& ((sb_expected_prev[73] !== last_sb_exp[73]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[73] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[73] = sb_expected_prev[73];
	end
	if (
		( sb_expected_prev[74] !== 1'bx ) && ( sb_prev[74] !== sb_expected_prev[74] )
		&& ((sb_expected_prev[74] !== last_sb_exp[74]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[74] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[74] = sb_expected_prev[74];
	end
	if (
		( sb_expected_prev[75] !== 1'bx ) && ( sb_prev[75] !== sb_expected_prev[75] )
		&& ((sb_expected_prev[75] !== last_sb_exp[75]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[75] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[75] = sb_expected_prev[75];
	end
	if (
		( sb_expected_prev[76] !== 1'bx ) && ( sb_prev[76] !== sb_expected_prev[76] )
		&& ((sb_expected_prev[76] !== last_sb_exp[76]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[76] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[76] = sb_expected_prev[76];
	end
	if (
		( sb_expected_prev[77] !== 1'bx ) && ( sb_prev[77] !== sb_expected_prev[77] )
		&& ((sb_expected_prev[77] !== last_sb_exp[77]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[77] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[77] = sb_expected_prev[77];
	end
	if (
		( sb_expected_prev[78] !== 1'bx ) && ( sb_prev[78] !== sb_expected_prev[78] )
		&& ((sb_expected_prev[78] !== last_sb_exp[78]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[78] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[78] = sb_expected_prev[78];
	end
	if (
		( sb_expected_prev[79] !== 1'bx ) && ( sb_prev[79] !== sb_expected_prev[79] )
		&& ((sb_expected_prev[79] !== last_sb_exp[79]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[79] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[79] = sb_expected_prev[79];
	end
	if (
		( sb_expected_prev[80] !== 1'bx ) && ( sb_prev[80] !== sb_expected_prev[80] )
		&& ((sb_expected_prev[80] !== last_sb_exp[80]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[80] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[80] = sb_expected_prev[80];
	end
	if (
		( sb_expected_prev[81] !== 1'bx ) && ( sb_prev[81] !== sb_expected_prev[81] )
		&& ((sb_expected_prev[81] !== last_sb_exp[81]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[81] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[81] = sb_expected_prev[81];
	end
	if (
		( sb_expected_prev[82] !== 1'bx ) && ( sb_prev[82] !== sb_expected_prev[82] )
		&& ((sb_expected_prev[82] !== last_sb_exp[82]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[82] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[82] = sb_expected_prev[82];
	end
	if (
		( sb_expected_prev[83] !== 1'bx ) && ( sb_prev[83] !== sb_expected_prev[83] )
		&& ((sb_expected_prev[83] !== last_sb_exp[83]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[83] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[83] = sb_expected_prev[83];
	end
	if (
		( sb_expected_prev[84] !== 1'bx ) && ( sb_prev[84] !== sb_expected_prev[84] )
		&& ((sb_expected_prev[84] !== last_sb_exp[84]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[84] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[84] = sb_expected_prev[84];
	end
	if (
		( sb_expected_prev[85] !== 1'bx ) && ( sb_prev[85] !== sb_expected_prev[85] )
		&& ((sb_expected_prev[85] !== last_sb_exp[85]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[85] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[85] = sb_expected_prev[85];
	end
	if (
		( sb_expected_prev[86] !== 1'bx ) && ( sb_prev[86] !== sb_expected_prev[86] )
		&& ((sb_expected_prev[86] !== last_sb_exp[86]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[86] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[86] = sb_expected_prev[86];
	end
	if (
		( sb_expected_prev[87] !== 1'bx ) && ( sb_prev[87] !== sb_expected_prev[87] )
		&& ((sb_expected_prev[87] !== last_sb_exp[87]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[87] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[87] = sb_expected_prev[87];
	end
	if (
		( sb_expected_prev[88] !== 1'bx ) && ( sb_prev[88] !== sb_expected_prev[88] )
		&& ((sb_expected_prev[88] !== last_sb_exp[88]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[88] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[88] = sb_expected_prev[88];
	end
	if (
		( sb_expected_prev[89] !== 1'bx ) && ( sb_prev[89] !== sb_expected_prev[89] )
		&& ((sb_expected_prev[89] !== last_sb_exp[89]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[89] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[89] = sb_expected_prev[89];
	end
	if (
		( sb_expected_prev[90] !== 1'bx ) && ( sb_prev[90] !== sb_expected_prev[90] )
		&& ((sb_expected_prev[90] !== last_sb_exp[90]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[90] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[90] = sb_expected_prev[90];
	end
	if (
		( sb_expected_prev[91] !== 1'bx ) && ( sb_prev[91] !== sb_expected_prev[91] )
		&& ((sb_expected_prev[91] !== last_sb_exp[91]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[91] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[91] = sb_expected_prev[91];
	end
	if (
		( sb_expected_prev[92] !== 1'bx ) && ( sb_prev[92] !== sb_expected_prev[92] )
		&& ((sb_expected_prev[92] !== last_sb_exp[92]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[92] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[92] = sb_expected_prev[92];
	end
	if (
		( sb_expected_prev[93] !== 1'bx ) && ( sb_prev[93] !== sb_expected_prev[93] )
		&& ((sb_expected_prev[93] !== last_sb_exp[93]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[93] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[93] = sb_expected_prev[93];
	end
	if (
		( sb_expected_prev[94] !== 1'bx ) && ( sb_prev[94] !== sb_expected_prev[94] )
		&& ((sb_expected_prev[94] !== last_sb_exp[94]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[94] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[94] = sb_expected_prev[94];
	end
	if (
		( sb_expected_prev[95] !== 1'bx ) && ( sb_prev[95] !== sb_expected_prev[95] )
		&& ((sb_expected_prev[95] !== last_sb_exp[95]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[95] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[95] = sb_expected_prev[95];
	end
	if (
		( sb_expected_prev[96] !== 1'bx ) && ( sb_prev[96] !== sb_expected_prev[96] )
		&& ((sb_expected_prev[96] !== last_sb_exp[96]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[96] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[96] = sb_expected_prev[96];
	end
	if (
		( sb_expected_prev[97] !== 1'bx ) && ( sb_prev[97] !== sb_expected_prev[97] )
		&& ((sb_expected_prev[97] !== last_sb_exp[97]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[97] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[97] = sb_expected_prev[97];
	end
	if (
		( sb_expected_prev[98] !== 1'bx ) && ( sb_prev[98] !== sb_expected_prev[98] )
		&& ((sb_expected_prev[98] !== last_sb_exp[98]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[98] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[98] = sb_expected_prev[98];
	end
	if (
		( sb_expected_prev[99] !== 1'bx ) && ( sb_prev[99] !== sb_expected_prev[99] )
		&& ((sb_expected_prev[99] !== last_sb_exp[99]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[99] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[99] = sb_expected_prev[99];
	end
	if (
		( sb_expected_prev[100] !== 1'bx ) && ( sb_prev[100] !== sb_expected_prev[100] )
		&& ((sb_expected_prev[100] !== last_sb_exp[100]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[100] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[100] = sb_expected_prev[100];
	end
	if (
		( sb_expected_prev[101] !== 1'bx ) && ( sb_prev[101] !== sb_expected_prev[101] )
		&& ((sb_expected_prev[101] !== last_sb_exp[101]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[101] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[101] = sb_expected_prev[101];
	end
	if (
		( sb_expected_prev[102] !== 1'bx ) && ( sb_prev[102] !== sb_expected_prev[102] )
		&& ((sb_expected_prev[102] !== last_sb_exp[102]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[102] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[102] = sb_expected_prev[102];
	end
	if (
		( sb_expected_prev[103] !== 1'bx ) && ( sb_prev[103] !== sb_expected_prev[103] )
		&& ((sb_expected_prev[103] !== last_sb_exp[103]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[103] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[103] = sb_expected_prev[103];
	end
	if (
		( sb_expected_prev[104] !== 1'bx ) && ( sb_prev[104] !== sb_expected_prev[104] )
		&& ((sb_expected_prev[104] !== last_sb_exp[104]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[104] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[104] = sb_expected_prev[104];
	end
	if (
		( sb_expected_prev[105] !== 1'bx ) && ( sb_prev[105] !== sb_expected_prev[105] )
		&& ((sb_expected_prev[105] !== last_sb_exp[105]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[105] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[105] = sb_expected_prev[105];
	end
	if (
		( sb_expected_prev[106] !== 1'bx ) && ( sb_prev[106] !== sb_expected_prev[106] )
		&& ((sb_expected_prev[106] !== last_sb_exp[106]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[106] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[106] = sb_expected_prev[106];
	end
	if (
		( sb_expected_prev[107] !== 1'bx ) && ( sb_prev[107] !== sb_expected_prev[107] )
		&& ((sb_expected_prev[107] !== last_sb_exp[107]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[107] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[107] = sb_expected_prev[107];
	end
	if (
		( sb_expected_prev[108] !== 1'bx ) && ( sb_prev[108] !== sb_expected_prev[108] )
		&& ((sb_expected_prev[108] !== last_sb_exp[108]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[108] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[108] = sb_expected_prev[108];
	end
	if (
		( sb_expected_prev[109] !== 1'bx ) && ( sb_prev[109] !== sb_expected_prev[109] )
		&& ((sb_expected_prev[109] !== last_sb_exp[109]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[109] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[109] = sb_expected_prev[109];
	end
	if (
		( sb_expected_prev[110] !== 1'bx ) && ( sb_prev[110] !== sb_expected_prev[110] )
		&& ((sb_expected_prev[110] !== last_sb_exp[110]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[110] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[110] = sb_expected_prev[110];
	end
	if (
		( sb_expected_prev[111] !== 1'bx ) && ( sb_prev[111] !== sb_expected_prev[111] )
		&& ((sb_expected_prev[111] !== last_sb_exp[111]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[111] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[111] = sb_expected_prev[111];
	end
	if (
		( sb_expected_prev[112] !== 1'bx ) && ( sb_prev[112] !== sb_expected_prev[112] )
		&& ((sb_expected_prev[112] !== last_sb_exp[112]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[112] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[112] = sb_expected_prev[112];
	end
	if (
		( sb_expected_prev[113] !== 1'bx ) && ( sb_prev[113] !== sb_expected_prev[113] )
		&& ((sb_expected_prev[113] !== last_sb_exp[113]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[113] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[113] = sb_expected_prev[113];
	end
	if (
		( sb_expected_prev[114] !== 1'bx ) && ( sb_prev[114] !== sb_expected_prev[114] )
		&& ((sb_expected_prev[114] !== last_sb_exp[114]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[114] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[114] = sb_expected_prev[114];
	end
	if (
		( sb_expected_prev[115] !== 1'bx ) && ( sb_prev[115] !== sb_expected_prev[115] )
		&& ((sb_expected_prev[115] !== last_sb_exp[115]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[115] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[115] = sb_expected_prev[115];
	end
	if (
		( sb_expected_prev[116] !== 1'bx ) && ( sb_prev[116] !== sb_expected_prev[116] )
		&& ((sb_expected_prev[116] !== last_sb_exp[116]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[116] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[116] = sb_expected_prev[116];
	end
	if (
		( sb_expected_prev[117] !== 1'bx ) && ( sb_prev[117] !== sb_expected_prev[117] )
		&& ((sb_expected_prev[117] !== last_sb_exp[117]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[117] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[117] = sb_expected_prev[117];
	end
	if (
		( sb_expected_prev[118] !== 1'bx ) && ( sb_prev[118] !== sb_expected_prev[118] )
		&& ((sb_expected_prev[118] !== last_sb_exp[118]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[118] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[118] = sb_expected_prev[118];
	end
	if (
		( sb_expected_prev[119] !== 1'bx ) && ( sb_prev[119] !== sb_expected_prev[119] )
		&& ((sb_expected_prev[119] !== last_sb_exp[119]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[119] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[119] = sb_expected_prev[119];
	end
	if (
		( sb_expected_prev[120] !== 1'bx ) && ( sb_prev[120] !== sb_expected_prev[120] )
		&& ((sb_expected_prev[120] !== last_sb_exp[120]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[120] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[120] = sb_expected_prev[120];
	end
	if (
		( sb_expected_prev[121] !== 1'bx ) && ( sb_prev[121] !== sb_expected_prev[121] )
		&& ((sb_expected_prev[121] !== last_sb_exp[121]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[121] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[121] = sb_expected_prev[121];
	end
	if (
		( sb_expected_prev[122] !== 1'bx ) && ( sb_prev[122] !== sb_expected_prev[122] )
		&& ((sb_expected_prev[122] !== last_sb_exp[122]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[122] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[122] = sb_expected_prev[122];
	end
	if (
		( sb_expected_prev[123] !== 1'bx ) && ( sb_prev[123] !== sb_expected_prev[123] )
		&& ((sb_expected_prev[123] !== last_sb_exp[123]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[123] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[123] = sb_expected_prev[123];
	end
	if (
		( sb_expected_prev[124] !== 1'bx ) && ( sb_prev[124] !== sb_expected_prev[124] )
		&& ((sb_expected_prev[124] !== last_sb_exp[124]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[124] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[124] = sb_expected_prev[124];
	end
	if (
		( sb_expected_prev[125] !== 1'bx ) && ( sb_prev[125] !== sb_expected_prev[125] )
		&& ((sb_expected_prev[125] !== last_sb_exp[125]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[125] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[125] = sb_expected_prev[125];
	end
	if (
		( sb_expected_prev[126] !== 1'bx ) && ( sb_prev[126] !== sb_expected_prev[126] )
		&& ((sb_expected_prev[126] !== last_sb_exp[126]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[126] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[126] = sb_expected_prev[126];
	end
	if (
		( sb_expected_prev[127] !== 1'bx ) && ( sb_prev[127] !== sb_expected_prev[127] )
		&& ((sb_expected_prev[127] !== last_sb_exp[127]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb[127] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp[127] = sb_expected_prev[127];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AES_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [127:0] in;
reg [127:0] key;
reg reset;
reg start;
// wires                                               
wire ready;
wire [127:0] sb;

wire sampler;                             

// assign statements (if any)                          
AES_top i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.in(in),
	.key(key),
	.ready(ready),
	.reset(reset),
	.sb(sb),
	.start(start)
);

// CLK
initial
begin
	repeat(45)
	begin
		CLK = 1'b0;
		CLK = #11000 1'b1;
		# 11000;
	end
	CLK = 1'b0;
end 
// in[ 127 ]
initial
begin
	in[127] = 1'b0;
end 
// in[ 126 ]
initial
begin
	in[126] = 1'b0;
end 
// in[ 125 ]
initial
begin
	in[125] = 1'b1;
end 
// in[ 124 ]
initial
begin
	in[124] = 1'b1;
end 
// in[ 123 ]
initial
begin
	in[123] = 1'b0;
end 
// in[ 122 ]
initial
begin
	in[122] = 1'b0;
end 
// in[ 121 ]
initial
begin
	in[121] = 1'b1;
end 
// in[ 120 ]
initial
begin
	in[120] = 1'b0;
end 
// in[ 119 ]
initial
begin
	in[119] = 1'b0;
end 
// in[ 118 ]
initial
begin
	in[118] = 1'b1;
end 
// in[ 117 ]
initial
begin
	in[117] = 1'b0;
end 
// in[ 116 ]
initial
begin
	in[116] = 1'b0;
end 
// in[ 115 ]
initial
begin
	in[115] = 1'b0;
end 
// in[ 114 ]
initial
begin
	in[114] = 1'b0;
end 
// in[ 113 ]
initial
begin
	in[113] = 1'b1;
end 
// in[ 112 ]
initial
begin
	in[112] = 1'b1;
end 
// in[ 111 ]
initial
begin
	in[111] = 1'b1;
end 
// in[ 110 ]
initial
begin
	in[110] = 1'b1;
end 
// in[ 109 ]
initial
begin
	in[109] = 1'b1;
end 
// in[ 108 ]
initial
begin
	in[108] = 1'b1;
end 
// in[ 107 ]
initial
begin
	in[107] = 1'b0;
end 
// in[ 106 ]
initial
begin
	in[106] = 1'b1;
end 
// in[ 105 ]
initial
begin
	in[105] = 1'b1;
end 
// in[ 104 ]
initial
begin
	in[104] = 1'b0;
end 
// in[ 103 ]
initial
begin
	in[103] = 1'b1;
end 
// in[ 102 ]
initial
begin
	in[102] = 1'b0;
end 
// in[ 101 ]
initial
begin
	in[101] = 1'b1;
end 
// in[ 100 ]
initial
begin
	in[100] = 1'b0;
end 
// in[ 99 ]
initial
begin
	in[99] = 1'b1;
end 
// in[ 98 ]
initial
begin
	in[98] = 1'b0;
end 
// in[ 97 ]
initial
begin
	in[97] = 1'b0;
end 
// in[ 96 ]
initial
begin
	in[96] = 1'b0;
end 
// in[ 95 ]
initial
begin
	in[95] = 1'b1;
end 
// in[ 94 ]
initial
begin
	in[94] = 1'b0;
end 
// in[ 93 ]
initial
begin
	in[93] = 1'b0;
end 
// in[ 92 ]
initial
begin
	in[92] = 1'b0;
end 
// in[ 91 ]
initial
begin
	in[91] = 1'b1;
end 
// in[ 90 ]
initial
begin
	in[90] = 1'b0;
end 
// in[ 89 ]
initial
begin
	in[89] = 1'b0;
end 
// in[ 88 ]
initial
begin
	in[88] = 1'b0;
end 
// in[ 87 ]
initial
begin
	in[87] = 1'b0;
end 
// in[ 86 ]
initial
begin
	in[86] = 1'b1;
end 
// in[ 85 ]
initial
begin
	in[85] = 1'b0;
end 
// in[ 84 ]
initial
begin
	in[84] = 1'b1;
end 
// in[ 83 ]
initial
begin
	in[83] = 1'b1;
end 
// in[ 82 ]
initial
begin
	in[82] = 1'b0;
end 
// in[ 81 ]
initial
begin
	in[81] = 1'b1;
end 
// in[ 80 ]
initial
begin
	in[80] = 1'b0;
end 
// in[ 79 ]
initial
begin
	in[79] = 1'b0;
end 
// in[ 78 ]
initial
begin
	in[78] = 1'b0;
end 
// in[ 77 ]
initial
begin
	in[77] = 1'b1;
end 
// in[ 76 ]
initial
begin
	in[76] = 1'b1;
end 
// in[ 75 ]
initial
begin
	in[75] = 1'b0;
end 
// in[ 74 ]
initial
begin
	in[74] = 1'b0;
end 
// in[ 73 ]
initial
begin
	in[73] = 1'b0;
end 
// in[ 72 ]
initial
begin
	in[72] = 1'b0;
end 
// in[ 71 ]
initial
begin
	in[71] = 1'b1;
end 
// in[ 70 ]
initial
begin
	in[70] = 1'b0;
end 
// in[ 69 ]
initial
begin
	in[69] = 1'b0;
end 
// in[ 68 ]
initial
begin
	in[68] = 1'b0;
end 
// in[ 67 ]
initial
begin
	in[67] = 1'b1;
end 
// in[ 66 ]
initial
begin
	in[66] = 1'b1;
end 
// in[ 65 ]
initial
begin
	in[65] = 1'b0;
end 
// in[ 64 ]
initial
begin
	in[64] = 1'b1;
end 
// in[ 63 ]
initial
begin
	in[63] = 1'b0;
end 
// in[ 62 ]
initial
begin
	in[62] = 1'b0;
end 
// in[ 61 ]
initial
begin
	in[61] = 1'b1;
end 
// in[ 60 ]
initial
begin
	in[60] = 1'b1;
end 
// in[ 59 ]
initial
begin
	in[59] = 1'b0;
end 
// in[ 58 ]
initial
begin
	in[58] = 1'b0;
end 
// in[ 57 ]
initial
begin
	in[57] = 1'b0;
end 
// in[ 56 ]
initial
begin
	in[56] = 1'b1;
end 
// in[ 55 ]
initial
begin
	in[55] = 1'b0;
end 
// in[ 54 ]
initial
begin
	in[54] = 1'b0;
end 
// in[ 53 ]
initial
begin
	in[53] = 1'b1;
end 
// in[ 52 ]
initial
begin
	in[52] = 1'b1;
end 
// in[ 51 ]
initial
begin
	in[51] = 1'b0;
end 
// in[ 50 ]
initial
begin
	in[50] = 1'b0;
end 
// in[ 49 ]
initial
begin
	in[49] = 1'b0;
end 
// in[ 48 ]
initial
begin
	in[48] = 1'b1;
end 
// in[ 47 ]
initial
begin
	in[47] = 1'b1;
end 
// in[ 46 ]
initial
begin
	in[46] = 1'b0;
end 
// in[ 45 ]
initial
begin
	in[45] = 1'b0;
end 
// in[ 44 ]
initial
begin
	in[44] = 1'b1;
end 
// in[ 43 ]
initial
begin
	in[43] = 1'b1;
end 
// in[ 42 ]
initial
begin
	in[42] = 1'b0;
end 
// in[ 41 ]
initial
begin
	in[41] = 1'b0;
end 
// in[ 40 ]
initial
begin
	in[40] = 1'b0;
end 
// in[ 39 ]
initial
begin
	in[39] = 1'b1;
end 
// in[ 38 ]
initial
begin
	in[38] = 1'b0;
end 
// in[ 37 ]
initial
begin
	in[37] = 1'b1;
end 
// in[ 36 ]
initial
begin
	in[36] = 1'b0;
end 
// in[ 35 ]
initial
begin
	in[35] = 1'b0;
end 
// in[ 34 ]
initial
begin
	in[34] = 1'b0;
end 
// in[ 33 ]
initial
begin
	in[33] = 1'b1;
end 
// in[ 32 ]
initial
begin
	in[32] = 1'b0;
end 
// in[ 31 ]
initial
begin
	in[31] = 1'b1;
end 
// in[ 30 ]
initial
begin
	in[30] = 1'b1;
end 
// in[ 29 ]
initial
begin
	in[29] = 1'b1;
end 
// in[ 28 ]
initial
begin
	in[28] = 1'b0;
end 
// in[ 27 ]
initial
begin
	in[27] = 1'b0;
end 
// in[ 26 ]
initial
begin
	in[26] = 1'b0;
end 
// in[ 25 ]
initial
begin
	in[25] = 1'b0;
end 
// in[ 24 ]
initial
begin
	in[24] = 1'b0;
end 
// in[ 23 ]
initial
begin
	in[23] = 1'b0;
end 
// in[ 22 ]
initial
begin
	in[22] = 1'b0;
end 
// in[ 21 ]
initial
begin
	in[21] = 1'b1;
end 
// in[ 20 ]
initial
begin
	in[20] = 1'b1;
end 
// in[ 19 ]
initial
begin
	in[19] = 1'b0;
end 
// in[ 18 ]
initial
begin
	in[18] = 1'b1;
end 
// in[ 17 ]
initial
begin
	in[17] = 1'b1;
end 
// in[ 16 ]
initial
begin
	in[16] = 1'b1;
end 
// in[ 15 ]
initial
begin
	in[15] = 1'b0;
end 
// in[ 14 ]
initial
begin
	in[14] = 1'b0;
end 
// in[ 13 ]
initial
begin
	in[13] = 1'b0;
end 
// in[ 12 ]
initial
begin
	in[12] = 1'b0;
end 
// in[ 11 ]
initial
begin
	in[11] = 1'b0;
end 
// in[ 10 ]
initial
begin
	in[10] = 1'b1;
end 
// in[ 9 ]
initial
begin
	in[9] = 1'b1;
end 
// in[ 8 ]
initial
begin
	in[8] = 1'b1;
end 
// in[ 7 ]
initial
begin
	in[7] = 1'b0;
end 
// in[ 6 ]
initial
begin
	in[6] = 1'b0;
end 
// in[ 5 ]
initial
begin
	in[5] = 1'b1;
end 
// in[ 4 ]
initial
begin
	in[4] = 1'b1;
end 
// in[ 3 ]
initial
begin
	in[3] = 1'b0;
end 
// in[ 2 ]
initial
begin
	in[2] = 1'b1;
end 
// in[ 1 ]
initial
begin
	in[1] = 1'b0;
end 
// in[ 0 ]
initial
begin
	in[0] = 1'b0;
end 
// key[ 127 ]
initial
begin
	key[127] = 1'b0;
end 
// key[ 126 ]
initial
begin
	key[126] = 1'b0;
end 
// key[ 125 ]
initial
begin
	key[125] = 1'b1;
end 
// key[ 124 ]
initial
begin
	key[124] = 1'b0;
end 
// key[ 123 ]
initial
begin
	key[123] = 1'b1;
end 
// key[ 122 ]
initial
begin
	key[122] = 1'b0;
end 
// key[ 121 ]
initial
begin
	key[121] = 1'b1;
end 
// key[ 120 ]
initial
begin
	key[120] = 1'b1;
end 
// key[ 119 ]
initial
begin
	key[119] = 1'b0;
end 
// key[ 118 ]
initial
begin
	key[118] = 1'b1;
end 
// key[ 117 ]
initial
begin
	key[117] = 1'b1;
end 
// key[ 116 ]
initial
begin
	key[116] = 1'b1;
end 
// key[ 115 ]
initial
begin
	key[115] = 1'b1;
end 
// key[ 114 ]
initial
begin
	key[114] = 1'b1;
end 
// key[ 113 ]
initial
begin
	key[113] = 1'b1;
end 
// key[ 112 ]
initial
begin
	key[112] = 1'b0;
end 
// key[ 111 ]
initial
begin
	key[111] = 1'b0;
end 
// key[ 110 ]
initial
begin
	key[110] = 1'b0;
end 
// key[ 109 ]
initial
begin
	key[109] = 1'b0;
end 
// key[ 108 ]
initial
begin
	key[108] = 1'b1;
end 
// key[ 107 ]
initial
begin
	key[107] = 1'b0;
end 
// key[ 106 ]
initial
begin
	key[106] = 1'b1;
end 
// key[ 105 ]
initial
begin
	key[105] = 1'b0;
end 
// key[ 104 ]
initial
begin
	key[104] = 1'b1;
end 
// key[ 103 ]
initial
begin
	key[103] = 1'b0;
end 
// key[ 102 ]
initial
begin
	key[102] = 1'b0;
end 
// key[ 101 ]
initial
begin
	key[101] = 1'b0;
end 
// key[ 100 ]
initial
begin
	key[100] = 1'b1;
end 
// key[ 99 ]
initial
begin
	key[99] = 1'b0;
end 
// key[ 98 ]
initial
begin
	key[98] = 1'b1;
end 
// key[ 97 ]
initial
begin
	key[97] = 1'b1;
end 
// key[ 96 ]
initial
begin
	key[96] = 1'b0;
end 
// key[ 95 ]
initial
begin
	key[95] = 1'b0;
end 
// key[ 94 ]
initial
begin
	key[94] = 1'b0;
end 
// key[ 93 ]
initial
begin
	key[93] = 1'b1;
end 
// key[ 92 ]
initial
begin
	key[92] = 1'b0;
end 
// key[ 91 ]
initial
begin
	key[91] = 1'b1;
end 
// key[ 90 ]
initial
begin
	key[90] = 1'b0;
end 
// key[ 89 ]
initial
begin
	key[89] = 1'b0;
end 
// key[ 88 ]
initial
begin
	key[88] = 1'b0;
end 
// key[ 87 ]
initial
begin
	key[87] = 1'b1;
end 
// key[ 86 ]
initial
begin
	key[86] = 1'b0;
end 
// key[ 85 ]
initial
begin
	key[85] = 1'b1;
end 
// key[ 84 ]
initial
begin
	key[84] = 1'b0;
end 
// key[ 83 ]
initial
begin
	key[83] = 1'b1;
end 
// key[ 82 ]
initial
begin
	key[82] = 1'b1;
end 
// key[ 81 ]
initial
begin
	key[81] = 1'b1;
end 
// key[ 80 ]
initial
begin
	key[80] = 1'b0;
end 
// key[ 79 ]
initial
begin
	key[79] = 1'b1;
end 
// key[ 78 ]
initial
begin
	key[78] = 1'b1;
end 
// key[ 77 ]
initial
begin
	key[77] = 1'b0;
end 
// key[ 76 ]
initial
begin
	key[76] = 1'b1;
end 
// key[ 75 ]
initial
begin
	key[75] = 1'b0;
end 
// key[ 74 ]
initial
begin
	key[74] = 1'b0;
end 
// key[ 73 ]
initial
begin
	key[73] = 1'b1;
end 
// key[ 72 ]
initial
begin
	key[72] = 1'b0;
end 
// key[ 71 ]
initial
begin
	key[71] = 1'b1;
end 
// key[ 70 ]
initial
begin
	key[70] = 1'b0;
end 
// key[ 69 ]
initial
begin
	key[69] = 1'b1;
end 
// key[ 68 ]
initial
begin
	key[68] = 1'b0;
end 
// key[ 67 ]
initial
begin
	key[67] = 1'b0;
end 
// key[ 66 ]
initial
begin
	key[66] = 1'b1;
end 
// key[ 65 ]
initial
begin
	key[65] = 1'b1;
end 
// key[ 64 ]
initial
begin
	key[64] = 1'b0;
end 
// key[ 63 ]
initial
begin
	key[63] = 1'b1;
end 
// key[ 62 ]
initial
begin
	key[62] = 1'b0;
end 
// key[ 61 ]
initial
begin
	key[61] = 1'b1;
end 
// key[ 60 ]
initial
begin
	key[60] = 1'b0;
end 
// key[ 59 ]
initial
begin
	key[59] = 1'b1;
end 
// key[ 58 ]
initial
begin
	key[58] = 1'b0;
end 
// key[ 57 ]
initial
begin
	key[57] = 1'b1;
end 
// key[ 56 ]
initial
begin
	key[56] = 1'b1;
end 
// key[ 55 ]
initial
begin
	key[55] = 1'b1;
end 
// key[ 54 ]
initial
begin
	key[54] = 1'b1;
end 
// key[ 53 ]
initial
begin
	key[53] = 1'b1;
end 
// key[ 52 ]
initial
begin
	key[52] = 1'b1;
end 
// key[ 51 ]
initial
begin
	key[51] = 1'b0;
end 
// key[ 50 ]
initial
begin
	key[50] = 1'b1;
end 
// key[ 49 ]
initial
begin
	key[49] = 1'b1;
end 
// key[ 48 ]
initial
begin
	key[48] = 1'b1;
end 
// key[ 47 ]
initial
begin
	key[47] = 1'b0;
end 
// key[ 46 ]
initial
begin
	key[46] = 1'b0;
end 
// key[ 45 ]
initial
begin
	key[45] = 1'b0;
end 
// key[ 44 ]
initial
begin
	key[44] = 1'b1;
end 
// key[ 43 ]
initial
begin
	key[43] = 1'b0;
end 
// key[ 42 ]
initial
begin
	key[42] = 1'b1;
end 
// key[ 41 ]
initial
begin
	key[41] = 1'b0;
end 
// key[ 40 ]
initial
begin
	key[40] = 1'b1;
end 
// key[ 39 ]
initial
begin
	key[39] = 1'b1;
end 
// key[ 38 ]
initial
begin
	key[38] = 1'b0;
end 
// key[ 37 ]
initial
begin
	key[37] = 1'b0;
end 
// key[ 36 ]
initial
begin
	key[36] = 1'b0;
end 
// key[ 35 ]
initial
begin
	key[35] = 1'b1;
end 
// key[ 34 ]
initial
begin
	key[34] = 1'b0;
end 
// key[ 33 ]
initial
begin
	key[33] = 1'b0;
end 
// key[ 32 ]
initial
begin
	key[32] = 1'b0;
end 
// key[ 31 ]
initial
begin
	key[31] = 1'b0;
end 
// key[ 30 ]
initial
begin
	key[30] = 1'b0;
end 
// key[ 29 ]
initial
begin
	key[29] = 1'b0;
end 
// key[ 28 ]
initial
begin
	key[28] = 1'b0;
end 
// key[ 27 ]
initial
begin
	key[27] = 1'b1;
end 
// key[ 26 ]
initial
begin
	key[26] = 1'b0;
end 
// key[ 25 ]
initial
begin
	key[25] = 1'b0;
end 
// key[ 24 ]
initial
begin
	key[24] = 1'b1;
end 
// key[ 23 ]
initial
begin
	key[23] = 1'b1;
end 
// key[ 22 ]
initial
begin
	key[22] = 1'b1;
end 
// key[ 21 ]
initial
begin
	key[21] = 1'b0;
end 
// key[ 20 ]
initial
begin
	key[20] = 1'b0;
end 
// key[ 19 ]
initial
begin
	key[19] = 1'b1;
end 
// key[ 18 ]
initial
begin
	key[18] = 1'b1;
end 
// key[ 17 ]
initial
begin
	key[17] = 1'b1;
end 
// key[ 16 ]
initial
begin
	key[16] = 1'b1;
end 
// key[ 15 ]
initial
begin
	key[15] = 1'b0;
end 
// key[ 14 ]
initial
begin
	key[14] = 1'b1;
end 
// key[ 13 ]
initial
begin
	key[13] = 1'b0;
end 
// key[ 12 ]
initial
begin
	key[12] = 1'b0;
end 
// key[ 11 ]
initial
begin
	key[11] = 1'b1;
end 
// key[ 10 ]
initial
begin
	key[10] = 1'b1;
end 
// key[ 9 ]
initial
begin
	key[9] = 1'b1;
end 
// key[ 8 ]
initial
begin
	key[8] = 1'b1;
end 
// key[ 7 ]
initial
begin
	key[7] = 1'b0;
end 
// key[ 6 ]
initial
begin
	key[6] = 1'b0;
end 
// key[ 5 ]
initial
begin
	key[5] = 1'b1;
end 
// key[ 4 ]
initial
begin
	key[4] = 1'b1;
end 
// key[ 3 ]
initial
begin
	key[3] = 1'b1;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b1;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
	reset = #10000 1'b0;
end 

// start
initial
begin
	start = 1'b1;
end 

AES_top_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.in(in),
	.key(key),
	.reset(reset),
	.start(start),
	.sampler_tx(sampler)
);

AES_top_vlg_check_tst tb_out(
	.ready(ready),
	.sb(sb),
	.sampler_rx(sampler)
);
endmodule

